
RTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000147c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800160c  0800160c  0001160c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800161c  0800161c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800161c  0800161c  0001161c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001624  08001624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001624  08001624  00011624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800162c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000ac  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006502  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000126c  00000000  00000000  0002653e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  000277b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000558  00000000  00000000  00027da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef2d  00000000  00000000  000282f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000063e1  00000000  00000000  00047225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5c63  00000000  00000000  0004d606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00113269  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001694  00000000  00000000  001132bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080015f4 	.word	0x080015f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080015f4 	.word	0x080015f4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f90c 	bl	80006e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f804 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f860 	bl	8000598 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x10>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 f87a 	bl	80015e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b22      	ldr	r3, [pc, #136]	; (8000590 <SystemClock_Config+0xb4>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <SystemClock_Config+0xb4>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b1f      	ldr	r3, [pc, #124]	; (8000590 <SystemClock_Config+0xb4>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <SystemClock_Config+0xb8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <SystemClock_Config+0xb8>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <SystemClock_Config+0xb8>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	2302      	movs	r3, #2
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000540:	2310      	movs	r3, #16
 8000542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000544:	2300      	movs	r3, #0
 8000546:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0320 	add.w	r3, r7, #32
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fa0f 	bl	8000970 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000558:	f000 f846 	bl	80005e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 fc72 	bl	8000e60 <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000582:	f000 f831 	bl	80005e8 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3750      	adds	r7, #80	; 0x50
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800
 8000594:	40007000 	.word	0x40007000

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_GPIO_Init+0x4c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800

080005e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <Error_Handler+0x8>
	...

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <HAL_MspInit+0x4c>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <HAL_MspInit+0x4c>)
 8000604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_MspInit+0x4c>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <HAL_MspInit+0x4c>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_MspInit+0x4c>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_MspInit+0x4c>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <SystemInit+0x20>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <SystemInit+0x20>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800069a:	490e      	ldr	r1, [pc, #56]	; (80006d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800069e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a0:	e002      	b.n	80006a8 <LoopCopyDataInit>

080006a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a6:	3304      	adds	r3, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ac:	d3f9      	bcc.n	80006a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006b0:	4c0b      	ldr	r4, [pc, #44]	; (80006e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b4:	e001      	b.n	80006ba <LoopFillZerobss>

080006b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b8:	3204      	adds	r2, #4

080006ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006bc:	d3fb      	bcc.n	80006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006be:	f7ff ffd7 	bl	8000670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006c2:	f000 ff6b 	bl	800159c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c6:	f7ff feff 	bl	80004c8 <main>
  bx  lr    
 80006ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006d8:	0800162c 	.word	0x0800162c
  ldr r2, =_sbss
 80006dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006e0:	200000b8 	.word	0x200000b8

080006e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_Init+0x40>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <HAL_Init+0x40>)
 80006f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_Init+0x40>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_Init+0x40>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <HAL_Init+0x40>)
 800070a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800070e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000710:	2003      	movs	r0, #3
 8000712:	f000 f8f9 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000716:	200f      	movs	r0, #15
 8000718:	f000 f808 	bl	800072c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800071c:	f7ff ff6a 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023c00 	.word	0x40023c00

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_InitTick+0x54>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <HAL_InitTick+0x58>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4619      	mov	r1, r3
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	fbb3 f3f1 	udiv	r3, r3, r1
 8000746:	fbb2 f3f3 	udiv	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 f903 	bl	8000956 <HAL_SYSTICK_Config>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e00e      	b.n	8000778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b0f      	cmp	r3, #15
 800075e:	d80a      	bhi.n	8000776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000760:	2200      	movs	r2, #0
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	f04f 30ff 	mov.w	r0, #4294967295
 8000768:	f000 f8d9 	bl	800091e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_InitTick+0x5c>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000772:	2300      	movs	r3, #0
 8000774:	e000      	b.n	8000778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000000 	.word	0x20000000
 8000784:	20000008 	.word	0x20000008
 8000788:	20000004 	.word	0x20000004

0800078c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_GetTick+0x14>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200000b4 	.word	0x200000b4

080007a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c0:	4013      	ands	r3, r2
 80007c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007d6:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <__NVIC_SetPriorityGrouping+0x44>)
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	60d3      	str	r3, [r2, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__NVIC_GetPriorityGrouping+0x18>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	f003 0307 	and.w	r3, r3, #7
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	; (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	; (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff47 	bl	80007a4 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000930:	f7ff ff5c 	bl	80007ec <__NVIC_GetPriorityGrouping>
 8000934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	68b9      	ldr	r1, [r7, #8]
 800093a:	6978      	ldr	r0, [r7, #20]
 800093c:	f7ff ff8e 	bl	800085c <NVIC_EncodePriority>
 8000940:	4602      	mov	r2, r0
 8000942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffb0 	bl	80008c4 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e264      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	2b00      	cmp	r3, #0
 800098c:	d075      	beq.n	8000a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800098e:	4ba3      	ldr	r3, [pc, #652]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
 8000996:	2b04      	cmp	r3, #4
 8000998:	d00c      	beq.n	80009b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800099a:	4ba0      	ldr	r3, [pc, #640]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d112      	bne.n	80009cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009a6:	4b9d      	ldr	r3, [pc, #628]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009b2:	d10b      	bne.n	80009cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009b4:	4b99      	ldr	r3, [pc, #612]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d05b      	beq.n	8000a78 <HAL_RCC_OscConfig+0x108>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d157      	bne.n	8000a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e23f      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d4:	d106      	bne.n	80009e4 <HAL_RCC_OscConfig+0x74>
 80009d6:	4b91      	ldr	r3, [pc, #580]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a90      	ldr	r2, [pc, #576]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e01d      	b.n	8000a20 <HAL_RCC_OscConfig+0xb0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009ec:	d10c      	bne.n	8000a08 <HAL_RCC_OscConfig+0x98>
 80009ee:	4b8b      	ldr	r3, [pc, #556]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a8a      	ldr	r2, [pc, #552]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f8:	6013      	str	r3, [r2, #0]
 80009fa:	4b88      	ldr	r3, [pc, #544]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a87      	ldr	r2, [pc, #540]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e00b      	b.n	8000a20 <HAL_RCC_OscConfig+0xb0>
 8000a08:	4b84      	ldr	r3, [pc, #528]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a83      	ldr	r2, [pc, #524]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b81      	ldr	r3, [pc, #516]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a80      	ldr	r2, [pc, #512]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d013      	beq.n	8000a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a28:	f7ff feb0 	bl	800078c <HAL_GetTick>
 8000a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a2e:	e008      	b.n	8000a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a30:	f7ff feac 	bl	800078c <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b64      	cmp	r3, #100	; 0x64
 8000a3c:	d901      	bls.n	8000a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	e204      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a42:	4b76      	ldr	r3, [pc, #472]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d0f0      	beq.n	8000a30 <HAL_RCC_OscConfig+0xc0>
 8000a4e:	e014      	b.n	8000a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a50:	f7ff fe9c 	bl	800078c <HAL_GetTick>
 8000a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a56:	e008      	b.n	8000a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a58:	f7ff fe98 	bl	800078c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	2b64      	cmp	r3, #100	; 0x64
 8000a64:	d901      	bls.n	8000a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e1f0      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a6a:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f0      	bne.n	8000a58 <HAL_RCC_OscConfig+0xe8>
 8000a76:	e000      	b.n	8000a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d063      	beq.n	8000b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a86:	4b65      	ldr	r3, [pc, #404]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	f003 030c 	and.w	r3, r3, #12
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00b      	beq.n	8000aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a92:	4b62      	ldr	r3, [pc, #392]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a9a:	2b08      	cmp	r3, #8
 8000a9c:	d11c      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d116      	bne.n	8000ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x152>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d001      	beq.n	8000ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e1c4      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	691b      	ldr	r3, [r3, #16]
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4952      	ldr	r1, [pc, #328]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ad6:	e03a      	b.n	8000b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d020      	beq.n	8000b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ae0:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <HAL_RCC_OscConfig+0x2b0>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fe51 	bl	800078c <HAL_GetTick>
 8000aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aec:	e008      	b.n	8000b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aee:	f7ff fe4d 	bl	800078c <HAL_GetTick>
 8000af2:	4602      	mov	r2, r0
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d901      	bls.n	8000b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e1a5      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b00:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f0      	beq.n	8000aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b0c:	4b43      	ldr	r3, [pc, #268]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	4940      	ldr	r1, [pc, #256]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	600b      	str	r3, [r1, #0]
 8000b20:	e015      	b.n	8000b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <HAL_RCC_OscConfig+0x2b0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b28:	f7ff fe30 	bl	800078c <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b2e:	e008      	b.n	8000b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b30:	f7ff fe2c 	bl	800078c <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e184      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f0      	bne.n	8000b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d030      	beq.n	8000bbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d016      	beq.n	8000b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b62:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <HAL_RCC_OscConfig+0x2b4>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b68:	f7ff fe10 	bl	800078c <HAL_GetTick>
 8000b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b70:	f7ff fe0c 	bl	800078c <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e164      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0x200>
 8000b8e:	e015      	b.n	8000bbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <HAL_RCC_OscConfig+0x2b4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b96:	f7ff fdf9 	bl	800078c <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b9c:	e008      	b.n	8000bb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b9e:	f7ff fdf5 	bl	800078c <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d901      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000bac:	2303      	movs	r3, #3
 8000bae:	e14d      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f0      	bne.n	8000b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f000 80a0 	beq.w	8000d0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10f      	bne.n	8000bfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_RCC_OscConfig+0x2ac>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_RCC_OscConfig+0x2b8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d121      	bne.n	8000c4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_RCC_OscConfig+0x2b8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_RCC_OscConfig+0x2b8>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c12:	f7ff fdbb 	bl	800078c <HAL_GetTick>
 8000c16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c18:	e011      	b.n	8000c3e <HAL_RCC_OscConfig+0x2ce>
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	42470000 	.word	0x42470000
 8000c24:	42470e80 	.word	0x42470e80
 8000c28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c2c:	f7ff fdae 	bl	800078c <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e106      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c3e:	4b85      	ldr	r3, [pc, #532]	; (8000e54 <HAL_RCC_OscConfig+0x4e4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d106      	bne.n	8000c60 <HAL_RCC_OscConfig+0x2f0>
 8000c52:	4b81      	ldr	r3, [pc, #516]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c56:	4a80      	ldr	r2, [pc, #512]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000c5e:	e01c      	b.n	8000c9a <HAL_RCC_OscConfig+0x32a>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d10c      	bne.n	8000c82 <HAL_RCC_OscConfig+0x312>
 8000c68:	4b7b      	ldr	r3, [pc, #492]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6c:	4a7a      	ldr	r2, [pc, #488]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6713      	str	r3, [r2, #112]	; 0x70
 8000c74:	4b78      	ldr	r3, [pc, #480]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c78:	4a77      	ldr	r2, [pc, #476]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000c80:	e00b      	b.n	8000c9a <HAL_RCC_OscConfig+0x32a>
 8000c82:	4b75      	ldr	r3, [pc, #468]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c86:	4a74      	ldr	r2, [pc, #464]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000c8e:	4b72      	ldr	r3, [pc, #456]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c92:	4a71      	ldr	r2, [pc, #452]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000c94:	f023 0304 	bic.w	r3, r3, #4
 8000c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d015      	beq.n	8000cce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ca2:	f7ff fd73 	bl	800078c <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ca8:	e00a      	b.n	8000cc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000caa:	f7ff fd6f 	bl	800078c <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d901      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e0c5      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc0:	4b65      	ldr	r3, [pc, #404]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0ee      	beq.n	8000caa <HAL_RCC_OscConfig+0x33a>
 8000ccc:	e014      	b.n	8000cf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cce:	f7ff fd5d 	bl	800078c <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd4:	e00a      	b.n	8000cec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fd59 	bl	800078c <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e0af      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cec:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1ee      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d105      	bne.n	8000d0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cfe:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a55      	ldr	r2, [pc, #340]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 809b 	beq.w	8000e4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d14:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d05c      	beq.n	8000dda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d141      	bne.n	8000dac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d28:	4b4c      	ldr	r3, [pc, #304]	; (8000e5c <HAL_RCC_OscConfig+0x4ec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fd2d 	bl	800078c <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d34:	e008      	b.n	8000d48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d36:	f7ff fd29 	bl	800078c <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d901      	bls.n	8000d48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e081      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f0      	bne.n	8000d36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	019b      	lsls	r3, r3, #6
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	041b      	lsls	r3, r3, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d76:	061b      	lsls	r3, r3, #24
 8000d78:	4937      	ldr	r1, [pc, #220]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d7e:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_RCC_OscConfig+0x4ec>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fd02 	bl	800078c <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d8c:	f7ff fcfe 	bl	800078c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e056      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x41c>
 8000daa:	e04e      	b.n	8000e4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_RCC_OscConfig+0x4ec>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db2:	f7ff fceb 	bl	800078c <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dba:	f7ff fce7 	bl	800078c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e03f      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f0      	bne.n	8000dba <HAL_RCC_OscConfig+0x44a>
 8000dd8:	e037      	b.n	8000e4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e032      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_RCC_OscConfig+0x4e8>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d028      	beq.n	8000e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d121      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d11a      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e16:	4013      	ands	r3, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d111      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	085b      	lsrs	r3, r3, #1
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d107      	bne.n	8000e46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d001      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40007000 	.word	0x40007000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	42470060 	.word	0x42470060

08000e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e0cc      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e74:	4b68      	ldr	r3, [pc, #416]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d90c      	bls.n	8000e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e82:	4b65      	ldr	r3, [pc, #404]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e8a:	4b63      	ldr	r3, [pc, #396]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d001      	beq.n	8000e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0b8      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d020      	beq.n	8000eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000eb4:	4b59      	ldr	r3, [pc, #356]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	4a58      	ldr	r2, [pc, #352]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ecc:	4b53      	ldr	r3, [pc, #332]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a52      	ldr	r2, [pc, #328]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed8:	4b50      	ldr	r3, [pc, #320]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	494d      	ldr	r1, [pc, #308]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d044      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d107      	bne.n	8000f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b47      	ldr	r3, [pc, #284]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d119      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e07f      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d003      	beq.n	8000f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d107      	bne.n	8000f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e06f      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e067      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f023 0203 	bic.w	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	4934      	ldr	r1, [pc, #208]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f50:	f7ff fc1c 	bl	800078c <HAL_GetTick>
 8000f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f58:	f7ff fc18 	bl	800078c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e04f      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 020c 	and.w	r2, r3, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1eb      	bne.n	8000f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d20c      	bcs.n	8000fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_RCC_ClockConfig+0x1b8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d001      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e032      	b.n	800100e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0304 	and.w	r3, r3, #4
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4916      	ldr	r1, [pc, #88]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	490e      	ldr	r1, [pc, #56]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fe6:	f000 f821 	bl	800102c <HAL_RCC_GetSysClockFreq>
 8000fea:	4602      	mov	r2, r0
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	490a      	ldr	r1, [pc, #40]	; (8001020 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	5ccb      	ldrb	r3, [r1, r3]
 8000ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_RCC_ClockConfig+0x1c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fb90 	bl	800072c <HAL_InitTick>

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023c00 	.word	0x40023c00
 800101c:	40023800 	.word	0x40023800
 8001020:	0800160c 	.word	0x0800160c
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001032:	2100      	movs	r1, #0
 8001034:	6079      	str	r1, [r7, #4]
 8001036:	2100      	movs	r1, #0
 8001038:	60f9      	str	r1, [r7, #12]
 800103a:	2100      	movs	r1, #0
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800103e:	2100      	movs	r1, #0
 8001040:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001042:	4952      	ldr	r1, [pc, #328]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 8001044:	6889      	ldr	r1, [r1, #8]
 8001046:	f001 010c 	and.w	r1, r1, #12
 800104a:	2908      	cmp	r1, #8
 800104c:	d00d      	beq.n	800106a <HAL_RCC_GetSysClockFreq+0x3e>
 800104e:	2908      	cmp	r1, #8
 8001050:	f200 8094 	bhi.w	800117c <HAL_RCC_GetSysClockFreq+0x150>
 8001054:	2900      	cmp	r1, #0
 8001056:	d002      	beq.n	800105e <HAL_RCC_GetSysClockFreq+0x32>
 8001058:	2904      	cmp	r1, #4
 800105a:	d003      	beq.n	8001064 <HAL_RCC_GetSysClockFreq+0x38>
 800105c:	e08e      	b.n	800117c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800105e:	4b4c      	ldr	r3, [pc, #304]	; (8001190 <HAL_RCC_GetSysClockFreq+0x164>)
 8001060:	60bb      	str	r3, [r7, #8]
       break;
 8001062:	e08e      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_RCC_GetSysClockFreq+0x168>)
 8001066:	60bb      	str	r3, [r7, #8]
      break;
 8001068:	e08b      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800106a:	4948      	ldr	r1, [pc, #288]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 800106c:	6849      	ldr	r1, [r1, #4]
 800106e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001072:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001074:	4945      	ldr	r1, [pc, #276]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 8001076:	6849      	ldr	r1, [r1, #4]
 8001078:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800107c:	2900      	cmp	r1, #0
 800107e:	d024      	beq.n	80010ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001080:	4942      	ldr	r1, [pc, #264]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 8001082:	6849      	ldr	r1, [r1, #4]
 8001084:	0989      	lsrs	r1, r1, #6
 8001086:	4608      	mov	r0, r1
 8001088:	f04f 0100 	mov.w	r1, #0
 800108c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001090:	f04f 0500 	mov.w	r5, #0
 8001094:	ea00 0204 	and.w	r2, r0, r4
 8001098:	ea01 0305 	and.w	r3, r1, r5
 800109c:	493d      	ldr	r1, [pc, #244]	; (8001194 <HAL_RCC_GetSysClockFreq+0x168>)
 800109e:	fb01 f003 	mul.w	r0, r1, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	fb01 f102 	mul.w	r1, r1, r2
 80010a8:	1844      	adds	r4, r0, r1
 80010aa:	493a      	ldr	r1, [pc, #232]	; (8001194 <HAL_RCC_GetSysClockFreq+0x168>)
 80010ac:	fba2 0101 	umull	r0, r1, r2, r1
 80010b0:	1863      	adds	r3, r4, r1
 80010b2:	4619      	mov	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	f7ff f888 	bl	80001d0 <__aeabi_uldivmod>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4613      	mov	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e04a      	b.n	8001160 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	099b      	lsrs	r3, r3, #6
 80010d0:	461a      	mov	r2, r3
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80010da:	f04f 0100 	mov.w	r1, #0
 80010de:	ea02 0400 	and.w	r4, r2, r0
 80010e2:	ea03 0501 	and.w	r5, r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	014b      	lsls	r3, r1, #5
 80010f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80010f8:	0142      	lsls	r2, r0, #5
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	1b00      	subs	r0, r0, r4
 8001100:	eb61 0105 	sbc.w	r1, r1, r5
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	018b      	lsls	r3, r1, #6
 800110e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001112:	0182      	lsls	r2, r0, #6
 8001114:	1a12      	subs	r2, r2, r0
 8001116:	eb63 0301 	sbc.w	r3, r3, r1
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	f04f 0100 	mov.w	r1, #0
 8001122:	00d9      	lsls	r1, r3, #3
 8001124:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001128:	00d0      	lsls	r0, r2, #3
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	1912      	adds	r2, r2, r4
 8001130:	eb45 0303 	adc.w	r3, r5, r3
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	f04f 0100 	mov.w	r1, #0
 800113c:	0299      	lsls	r1, r3, #10
 800113e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001142:	0290      	lsls	r0, r2, #10
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	461a      	mov	r2, r3
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	f7ff f83c 	bl	80001d0 <__aeabi_uldivmod>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4613      	mov	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_RCC_GetSysClockFreq+0x160>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	0c1b      	lsrs	r3, r3, #16
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	3301      	adds	r3, #1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	fbb2 f3f3 	udiv	r3, r2, r3
 8001178:	60bb      	str	r3, [r7, #8]
      break;
 800117a:	e002      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_RCC_GetSysClockFreq+0x164>)
 800117e:	60bb      	str	r3, [r7, #8]
      break;
 8001180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001182:	68bb      	ldr	r3, [r7, #8]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	00f42400 	.word	0x00f42400
 8001194:	017d7840 	.word	0x017d7840

08001198 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80011a2:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <xTaskIncrementTick+0x200>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 80ec 	bne.w	8001384 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <xTaskIncrementTick+0x204>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80011b4:	4a79      	ldr	r2, [pc, #484]	; (800139c <xTaskIncrementTick+0x204>)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d120      	bne.n	8001202 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80011c0:	4b77      	ldr	r3, [pc, #476]	; (80013a0 <xTaskIncrementTick+0x208>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00a      	beq.n	80011e0 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80011ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ce:	f383 8811 	msr	BASEPRI, r3
 80011d2:	f3bf 8f6f 	isb	sy
 80011d6:	f3bf 8f4f 	dsb	sy
 80011da:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80011dc:	bf00      	nop
 80011de:	e7fe      	b.n	80011de <xTaskIncrementTick+0x46>
 80011e0:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <xTaskIncrementTick+0x208>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <xTaskIncrementTick+0x20c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <xTaskIncrementTick+0x208>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4a6d      	ldr	r2, [pc, #436]	; (80013a4 <xTaskIncrementTick+0x20c>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <xTaskIncrementTick+0x210>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a6b      	ldr	r2, [pc, #428]	; (80013a8 <xTaskIncrementTick+0x210>)
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	f000 f93d 	bl	800147c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001202:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <xTaskIncrementTick+0x214>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a3a      	ldr	r2, [r7, #32]
 8001208:	429a      	cmp	r2, r3
 800120a:	f0c0 80a6 	bcc.w	800135a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800120e:	4b64      	ldr	r3, [pc, #400]	; (80013a0 <xTaskIncrementTick+0x208>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <xTaskIncrementTick+0x214>)
 800121a:	f04f 32ff 	mov.w	r2, #4294967295
 800121e:	601a      	str	r2, [r3, #0]
                    break;
 8001220:	e09b      	b.n	800135a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <xTaskIncrementTick+0x208>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	429a      	cmp	r2, r3
 8001238:	d203      	bcs.n	8001242 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800123a:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <xTaskIncrementTick+0x214>)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001240:	e08b      	b.n	800135a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	68d2      	ldr	r2, [r2, #12]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	6892      	ldr	r2, [r2, #8]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3304      	adds	r3, #4
 8001264:	429a      	cmp	r2, r3
 8001266:	d103      	bne.n	8001270 <xTaskIncrementTick+0xd8>
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1e5a      	subs	r2, r3, #1
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01e      	beq.n	80012c6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	6a12      	ldr	r2, [r2, #32]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	69d2      	ldr	r2, [r2, #28]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	3318      	adds	r3, #24
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d103      	bne.n	80012b6 <xTaskIncrementTick+0x11e>
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1e5a      	subs	r2, r3, #1
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	2201      	movs	r2, #1
 80012cc:	409a      	lsls	r2, r3
 80012ce:	4b38      	ldr	r3, [pc, #224]	; (80013b0 <xTaskIncrementTick+0x218>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <xTaskIncrementTick+0x218>)
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012dc:	4935      	ldr	r1, [pc, #212]	; (80013b4 <xTaskIncrementTick+0x21c>)
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	3204      	adds	r2, #4
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4a26      	ldr	r2, [pc, #152]	; (80013b4 <xTaskIncrementTick+0x21c>)
 800131c:	441a      	add	r2, r3
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	615a      	str	r2, [r3, #20]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001326:	4923      	ldr	r1, [pc, #140]	; (80013b4 <xTaskIncrementTick+0x21c>)
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	440b      	add	r3, r1
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1c59      	adds	r1, r3, #1
 8001336:	481f      	ldr	r0, [pc, #124]	; (80013b4 <xTaskIncrementTick+0x21c>)
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4403      	add	r3, r0
 8001342:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <xTaskIncrementTick+0x220>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	429a      	cmp	r2, r3
 8001350:	f4ff af5d 	bcc.w	800120e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001358:	e759      	b.n	800120e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <xTaskIncrementTick+0x220>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001360:	4914      	ldr	r1, [pc, #80]	; (80013b4 <xTaskIncrementTick+0x21c>)
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d901      	bls.n	8001376 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <xTaskIncrementTick+0x224>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800137e:	2301      	movs	r3, #1
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	e004      	b.n	800138e <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <xTaskIncrementTick+0x228>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <xTaskIncrementTick+0x228>)
 800138c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001390:	4618      	mov	r0, r3
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200000b0 	.word	0x200000b0
 800139c:	20000098 	.word	0x20000098
 80013a0:	20000090 	.word	0x20000090
 80013a4:	20000094 	.word	0x20000094
 80013a8:	200000a8 	.word	0x200000a8
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	2000009c 	.word	0x2000009c
 80013b4:	2000002c 	.word	0x2000002c
 80013b8:	20000028 	.word	0x20000028
 80013bc:	200000a4 	.word	0x200000a4
 80013c0:	200000a0 	.word	0x200000a0

080013c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <vTaskSwitchContext+0xa4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <vTaskSwitchContext+0xa8>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80013d8:	e03f      	b.n	800145a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80013da:	4b24      	ldr	r3, [pc, #144]	; (800146c <vTaskSwitchContext+0xa8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013e0:	4b23      	ldr	r3, [pc, #140]	; (8001470 <vTaskSwitchContext+0xac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80013ee:	7afb      	ldrb	r3, [r7, #11]
 80013f0:	f1c3 031f 	rsb	r3, r3, #31
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	491f      	ldr	r1, [pc, #124]	; (8001474 <vTaskSwitchContext+0xb0>)
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	440b      	add	r3, r1
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10a      	bne.n	8001420 <vTaskSwitchContext+0x5c>
        __asm volatile
 800140a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140e:	f383 8811 	msr	BASEPRI, r3
 8001412:	f3bf 8f6f 	isb	sy
 8001416:	f3bf 8f4f 	dsb	sy
 800141a:	607b      	str	r3, [r7, #4]
    }
 800141c:	bf00      	nop
 800141e:	e7fe      	b.n	800141e <vTaskSwitchContext+0x5a>
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4a12      	ldr	r2, [pc, #72]	; (8001474 <vTaskSwitchContext+0xb0>)
 800142c:	4413      	add	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	3308      	adds	r3, #8
 8001442:	429a      	cmp	r2, r3
 8001444:	d104      	bne.n	8001450 <vTaskSwitchContext+0x8c>
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <vTaskSwitchContext+0xb4>)
 8001458:	6013      	str	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	200000b0 	.word	0x200000b0
 800146c:	200000a4 	.word	0x200000a4
 8001470:	2000009c 	.word	0x2000009c
 8001474:	2000002c 	.word	0x2000002c
 8001478:	20000028 	.word	0x20000028

0800147c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <prvResetNextTaskUnblockTime+0x30>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <prvResetNextTaskUnblockTime+0x34>)
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001492:	e005      	b.n	80014a0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <prvResetNextTaskUnblockTime+0x30>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <prvResetNextTaskUnblockTime+0x34>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000090 	.word	0x20000090
 80014b0:	200000ac 	.word	0x200000ac
	...

080014c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <pxCurrentTCBConst2>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	6808      	ldr	r0, [r1, #0]
 80014c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ca:	f380 8809 	msr	PSP, r0
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f04f 0000 	mov.w	r0, #0
 80014d6:	f380 8811 	msr	BASEPRI, r0
 80014da:	4770      	bx	lr
 80014dc:	f3af 8000 	nop.w

080014e0 <pxCurrentTCBConst2>:
 80014e0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
	...

080014f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80014f0:	f3ef 8009 	mrs	r0, PSP
 80014f4:	f3bf 8f6f 	isb	sy
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <pxCurrentTCBConst>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f01e 0f10 	tst.w	lr, #16
 8001500:	bf08      	it	eq
 8001502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800150a:	6010      	str	r0, [r2, #0]
 800150c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001510:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001514:	f380 8811 	msr	BASEPRI, r0
 8001518:	f3bf 8f4f 	dsb	sy
 800151c:	f3bf 8f6f 	isb	sy
 8001520:	f7ff ff50 	bl	80013c4 <vTaskSwitchContext>
 8001524:	f04f 0000 	mov.w	r0, #0
 8001528:	f380 8811 	msr	BASEPRI, r0
 800152c:	bc09      	pop	{r0, r3}
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	6808      	ldr	r0, [r1, #0]
 8001532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001536:	f01e 0f10 	tst.w	lr, #16
 800153a:	bf08      	it	eq
 800153c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001540:	f380 8809 	msr	PSP, r0
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	f3af 8000 	nop.w

08001550 <pxCurrentTCBConst>:
 8001550:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop

08001558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
        __asm volatile
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	607b      	str	r3, [r7, #4]
    }
 8001570:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001572:	f7ff fe11 	bl	8001198 <xTaskIncrementTick>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SysTick_Handler+0x40>)
 800157e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800158e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	e000ed04 	.word	0xe000ed04

0800159c <__libc_init_array>:
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	4d0d      	ldr	r5, [pc, #52]	; (80015d4 <__libc_init_array+0x38>)
 80015a0:	4c0d      	ldr	r4, [pc, #52]	; (80015d8 <__libc_init_array+0x3c>)
 80015a2:	1b64      	subs	r4, r4, r5
 80015a4:	10a4      	asrs	r4, r4, #2
 80015a6:	2600      	movs	r6, #0
 80015a8:	42a6      	cmp	r6, r4
 80015aa:	d109      	bne.n	80015c0 <__libc_init_array+0x24>
 80015ac:	4d0b      	ldr	r5, [pc, #44]	; (80015dc <__libc_init_array+0x40>)
 80015ae:	4c0c      	ldr	r4, [pc, #48]	; (80015e0 <__libc_init_array+0x44>)
 80015b0:	f000 f820 	bl	80015f4 <_init>
 80015b4:	1b64      	subs	r4, r4, r5
 80015b6:	10a4      	asrs	r4, r4, #2
 80015b8:	2600      	movs	r6, #0
 80015ba:	42a6      	cmp	r6, r4
 80015bc:	d105      	bne.n	80015ca <__libc_init_array+0x2e>
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015c4:	4798      	blx	r3
 80015c6:	3601      	adds	r6, #1
 80015c8:	e7ee      	b.n	80015a8 <__libc_init_array+0xc>
 80015ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ce:	4798      	blx	r3
 80015d0:	3601      	adds	r6, #1
 80015d2:	e7f2      	b.n	80015ba <__libc_init_array+0x1e>
 80015d4:	08001624 	.word	0x08001624
 80015d8:	08001624 	.word	0x08001624
 80015dc:	08001624 	.word	0x08001624
 80015e0:	08001628 	.word	0x08001628

080015e4 <memset>:
 80015e4:	4402      	add	r2, r0
 80015e6:	4603      	mov	r3, r0
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d100      	bne.n	80015ee <memset+0xa>
 80015ec:	4770      	bx	lr
 80015ee:	f803 1b01 	strb.w	r1, [r3], #1
 80015f2:	e7f9      	b.n	80015e8 <memset+0x4>

080015f4 <_init>:
 80015f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015f6:	bf00      	nop
 80015f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fa:	bc08      	pop	{r3}
 80015fc:	469e      	mov	lr, r3
 80015fe:	4770      	bx	lr

08001600 <_fini>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr
